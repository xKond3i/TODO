@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin stripes {
    &::before {
        content: '';
        position: absolute;
    
        width: var(--todo-stripe-gap);
        height: 100%;
    
        left: calc(var(--todo-btn-size) + var(--todo-row-gap) * 2);
        top: 0;
    
        border: {
            left: var(--stripe-border);
            right: var(--stripe-border);
        }
    }
}

*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    // base colors and gradients
    --color-primary: #2e3641;
    --color-disabled: #9eb2c0;
    --color-stripe: #dc9581;
    --color-white: #fff;

    --page-bg: #e9f0f4;

    --success: #a8bd44;
    --failure: #cd1010;

    // color assignment, borders and shadows
    --todo-bg: var(--color-white);
    --todo-border: 1px solid var(--color-disabled);

    --todo-header-bg: var(--color-primary);
    --todo-header-c: var(--color-white);

    --todo-row-bg: var(--color-white);
    --todo-row-c: var(--color-primary);

    --stripe-border: 1px solid var(--color-stripe);

    // dimensions and font sizes
    --gap-sm: .5rem;
    --gap-md: 1rem;
    --gap-lg: 3rem;

    --todo-stripe-gap: .5rem;
    --todo-row-gap: 1rem;

    --todo-btn-size: 1rem;

    --todo-skip-stripe: calc(var(--todo-btn-size) + var(--todo-stripe-gap) + var(--todo-row-gap) * 3);

    // transition
    --quick: .1s;
}

body {
    margin: 0;
    padding: var(--gap-lg);

    width: 100%;
    min-height: 100vh;
    height: auto;

    font-size: var(--global-fs);
    font-family: 'Lato', sans-serif;

    background-color: var(--page-bg);

    @include flex-center;
}

.__todo {
    &_container {
        width: auto;
        min-width: 256px;
        max-width: 100%;

        background-color: var(--todo-bg);
        border: var(--todo-border);
    }

    &_row {
        position: relative;
        @include stripes;
    }

    &_header {
        padding: var(--todo-row-gap);
        padding-left: var(--todo-skip-stripe);

        background-color: var(--todo-header-bg);
        color: var(--todo-header-c);

        -webkit-print-color-adjust: exact;
    }

    &_entry {
        border-bottom: var(--todo-border);
    }

    &_entry,
    &_new-entry {
        display: flex;

        padding: var(--todo-row-gap);
        gap: var(--todo-row-gap);

        & > .__todo_content {
            margin-left: calc(var(--todo-row-gap) + var(--todo-stripe-gap));
            width: 100%;
        }

        & > .__custom_checkbox,
        & > .__todo_icon_btn {
            width: var(--todo-btn-size);
            height: var(--todo-btn-size);
            flex-shrink: 0;
        }

        & > .__todo_add_content {
            font-family: inherit;
            font-size: inherit;
            border: none;
            outline: none;
            flex: 1;
        }

        &.__todo_entry_done {
            & > .__todo_content {
                color: var(--color-disabled);
                text-decoration: line-through;
            }

            & > .__todo_del {
                color: var(--color-disabled);
            }
        }
    }

    &_icon_btn {
        // for icons I'd have used APIs like fontawesome, bootstrap icons, google fonts icons, it would have been easier to format and maintain
        border: none;
        color: var(--color-primary);
        background: transparent;

        cursor: pointer;

        & > svg {
            transform: scale(1.25);
            transition: transform var(--quick) ease-in-out;
        }

        &:hover > svg {
            transform: scale(1.5);
        }
    }

    &_list {
        list-style: none;
    }
}

.__custom_checkbox {
    position: relative;

    &:hover::before {
        transform: scale(1.25);
    }
    
    &::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;

        pointer-events: none;

        border: var(--todo-border);
        border-radius: .1em;

        transition: transform var(--quick) ease-in-out;
    }

    & > input[type=checkbox] {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;

        cursor: pointer;
        pointer-events: all;

        &:checked + .__custom_checkbox_check {
            visibility: visible;
        }
    }

    &_check {
        position: absolute;
        visibility: hidden;
        pointer-events: none;
        color: var(--success);
        transform: scale(1.25);
    }
}