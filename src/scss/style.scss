@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin stripes {
    &::before {
        content: '';
        position: absolute;
    
        width: var(--todo-stripe-gap);
        height: 100%;
    
        left: calc(var(--todo-square-btn-size) + var(--todo-row-gap) * 2);
        top: 0;
    
        border: {
            left: var(--stripe-border);
            right: var(--stripe-border);
        }
    }
}

// BASIC SETUP - RESET SOME BASIC PROPERTIES
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

// VARIABLES
:root {
    // Base colors and gradients
    --color-primary: #2e3641;
    --color-disabled: #9eb2c0;
    --color-stripe: #dc9581;
    --color-white: #fff;

    --page-bg: #e9f0f4;

    --success: #97ab32;
    --failure: #cd1010;

    // Color assignment, borders and shadows
    --todo-bg: var(--color-white);
    --todo-border: 1px solid var(--color-disabled);

    --todo-header-bg: var(--color-primary);
    --todo-header-c: var(--color-white);

    --todo-row-bg: var(--color-white);
    --todo-row-c: var(--color-primary);

    --stripe-border: 1px solid var(--color-stripe);

    // Dimensions and font sizes
    --gap-sm: .5rem;
    --gap-md: 1rem;
    --gap-lg: 3rem;

    --todo-stripe-gap: .5rem;
    --todo-row-gap: 1rem;

    --todo-square-btn-size: 1rem;

    --fs-sm: 1rem;

    // Transitions
    --quick: .1s;
    --slow: .5s;
}

// BODY
body {
    margin: 0;
    padding: var(--gap-lg);

    width: 100%;
    min-height: 100vh;
    height: auto;

    font-size: var(--fs-sm);
    font-family: 'Lato', sans-serif;

    background-color: var(--page-bg);

    @include flex-center;
}

// TODO COMPONENT
// Every included subelements are described here
.__todo {
    &_container {
        width: auto;
        min-width: 256px;
        max-width: 100%;

        background-color: var(--todo-bg);
        border: var(--todo-border);

        z-index: 0;

        transition: width var(--quick) ease-in-out;
    }

    &_row {
        position: relative;

        --margin-size: calc(var(--todo-row-gap) * 2 + var(--todo-square-btn-size));

        display: grid;
        grid-template-columns: [margin] var(--margin-size)
                               [stripe] var(--todo-stripe-gap)
                               [content] auto
                               [trash] var(--margin-size);

        @include stripes;

        .__todo_content {
            grid-area: content;
            padding: var(--todo-row-gap);
            width: 100%;

            word-break: break-all;
        }
    }

    &_header {
        background-color: var(--todo-header-bg);
        color: var(--todo-header-c);

        z-index: 3;
    }

    &_entry {
        border-bottom: var(--todo-border);
        
        z-index: 2;

        // Entries marked as `done`
        &.__todo_entry_done {
            .__todo_content {
                color: var(--color-disabled);
                text-decoration: line-through;
            }

            .__todo_del {
                color: var(--color-disabled);
            }
        }

        // Interactive elements on both margins
        // Checkbox on the left, Trash on the right
        .__todo_checkbox {
            grid-area: margin;
        }

        .__todo_del { 
            grid-area: trash;
            transition: transform var(--quick) ease-in-out,
                        color var(--quick) ease-in-out;

            &:hover { color: var(--failure); }
        }
    }

    &_new-entry {
        .__todo_add { 
            grid-area: margin;
            transition: transform var(--quick) ease-in-out,
                        color var(--quick) ease-in-out;

            &:hover { color: var(--success); }
        }
        
        .__todo_add_content {
            font-family: monospace;
            // font-family: inherit;
            font-size: inherit;
            border: none;
            outline: none;
            
            grid-column-end: -1;
        }

    }
    &_entry,
    &_new-entry {
        background-color: var(--color-white);

        .__todo_checkbox,
        .__todo_icon_btn {
            width: var(--todo-square-btn-size);
            height: var(--todo-square-btn-size);
            flex-shrink: 0;

            align-self: start;
            justify-self: center;

            margin-top: var(--todo-row-gap);
        }
    }
    
    &_list {
        list-style: none;
    }

    &_icon_btn {
        // For icons I'd have used
        // Fontawesome / Bootstrap Icons / Google Fonts Icons or other similar tool
        // It would have been easier to format and maintain
        border: none;

        color: var(--color-primary);
        background: transparent;

        cursor: pointer;

        & svg {
            transform: scale(1.25);
            transition: transform var(--quick) ease-in-out;
        }

        &:hover svg {
            transform: scale(1.5);
        }
    }

    &_del_all { 
        position: absolute;
        top: var(--gap-md);
        right: var(--gap-md);

        @include flex-center;
        gap: var(--gap-sm);

        transition: transform var(--quick) ease-in-out,
                    color var(--quick) ease-in-out;

        &:hover { color: var(--failure); }

        & svg {
            width: var(--todo-square-btn-size);
            height: var(--todo-square-btn-size);
        }
    }
}

// CUSTOM CHECKBOX
.__custom_checkbox {
    position: relative;

    &:hover {
        &::before { transform: scale(1.25); }
        & .__custom_checkbox_check { transform: scale(1.5); }
    }
    
    &::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;

        pointer-events: none;

        border: var(--todo-border);
        border-radius: .1em;

        transition: transform var(--quick) ease-in-out;
    }

    & input[type=checkbox] {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;

        cursor: pointer;
        pointer-events: all;

        &:checked + .__custom_checkbox_check {
            visibility: visible;
        }
    }

    &_check {
        position: absolute;
        visibility: hidden;
        pointer-events: none;

        color: var(--success);

        transform: scale(1.25);

        transition: transform var(--quick) ease-in-out;
    }
}

// GLOBAL CLASSES AND UTILITIES
[hidden] { display: none; }

.failure { color: var(--failure); }
.success { color: var(--success); }

// ANIMATIONS
@keyframes shake {
    0% { transform: translateX(-1rem); }
    25% { transform: translateX(1rem); }
    50% { transform: translateX(-.5rem); }
    75% { transform: translateX(.5rem); }
    100% { transform: translateX(0); }
}

@keyframes slide-in {
    from {
        transform: translateY(-100%);
        max-height: 0;
        opacity: 0;
    }
    to {
        transform: translateY(0);
        max-height: 100vh;
        opacity: 1;
    }
}

@keyframes slide-out {
    from {
        max-height: 100vh;
    }
    to {
        transform: translateY(-100%);
        max-height: 0;
        opacity: 0;
    }
}

.invalid-shake {
    animation: shake var(--slow);
}

.slide-in {
    z-index: 1;
    animation: slide-in var(--slow);
}

.slide-out {
    z-index: 1;
    animation: slide-out var(--slow);
}

.dragging {
    opacity: .5;
}